#include "program.bpf.h"
#include "syscall_compat.h"

#include <vmlinux.h>

#include <bpf/bpf_core_read.h>
#include <bpf/bpf_helpers.h>
#include <bpf/bpf_tracing.h>

#include <gadget/buffer.h>
#include <gadget/macros.h>
#include <gadget/mntns_filter.h>
#include <gadget/types.h>

int syscall_actions[500] = {
  {{ range $syscallNr, $syscallAction  := .RawTracepoints -}}
  [{{ $syscallNr }}] = {{ $syscallAction }},
  {{ end -}}
  [499] = SCMP_ACT_UNDEFINED
};

SEC("raw_tracepoint/sys_enter")
int tracepoint__sys_enter(struct bpf_raw_tracepoint_args *ctx) {
  struct event *event;
  __u64 pid_tgid = bpf_get_current_pid_tgid();
  __u64 mntns_id = gadget_get_mntns_id();
  uint *map_action;
  uint action;

  if (gadget_should_discard_mntns_id(mntns_id))
    return 0;

  map_action = bpf_map_lookup_elem(&actions, &pid_tgid);
  if (map_action) {
    action = *map_action;
    if (action != SCMP_ACT_ERRNO) {
     bpf_map_delete_elem(&actions, &pid_tgid);
    }
  } else {
    action = {{ .DefaultAction }};
    if (action == SCMP_ACT_ERRNO) {
      bpf_map_update_elem(&actions, &pid_tgid, &action, BPF_NOEXIST);
    }
  }

  switch (action) {
    case SCMP_ACT_KILL_THREAD:
      bpf_send_signal_thread(SIGSYS);
      bpf_send_signal_thread(SIGKILL);
    case SCMP_ACT_KILL_PROCESS:
      bpf_send_signal(SIGSYS);
      bpf_send_signal(SIGKILL);
    case SCMP_ACT_TRAP:
      bpf_send_signal(SIGSYS);
  }
  
  if (action != SCMP_ACT_ALLOW) {
    event = gadget_reserve_buf(&events, sizeof(*event));
    if (!event)
      return 0;
    event->syscall_raw = ctx->args[1];
    event->action = action;
    event->mntns_id = mntns_id;
    gadget_submit_buf(ctx, &events, event, sizeof(*event));
  }

  return 0;
}

SEC("raw_tracepoint/sys_exit")
int tracepoint__sys_exit(struct bpf_raw_tracepoint_args *ctx) {
  struct event *event;
  __u64 pid_tgid = bpf_get_current_pid_tgid();
  uint *map_action;
  uint action;

  map_action = bpf_map_lookup_elem(&actions, &pid_tgid);
  if (map_action) {
    bpf_map_delete_elem(&actions, &pid_tgid);
  }

  return 0;
}

  
{{ range $syscallName, $syscall  := .Syscalls }}
SEC("tracepoint/syscalls/sys_enter_{{ $syscallName }}")
int tracepoint__sys_enter_{{ $syscallName }}(struct trace_event_raw_sys_enter *ctx) 
{
  u64 mntns_id = gadget_get_mntns_id();
  if (gadget_should_discard_mntns_id(mntns_id))
    return 0;
  
  u64 pid_tgid = bpf_get_current_pid_tgid();
  {{ if syscallHasCapsFilters $syscall }}
  struct task_struct *task;
  task = (struct task_struct *)bpf_get_current_task();
  if (!task)
    return 0;
  u64 caps;
  BPF_CORE_READ_INTO(&caps, task, cred, cap_effective);
  {{ end -}}
  {{ range $idx := $syscall.ArgsIndices }}
  {{- /* The operands for Seccomp conditions are uint64: https://github.com/seccomp/libseccomp-golang/blob/main/seccomp.go#L66 */}}
  u64 arg{{ $idx }} = ctx->args[{{ $idx }}];
  {{ end }}
  {{- range $rule := $syscall.Rules }}
  {{- /* TODO: iterate over args. For now we assume it is an array with a single element */}}
  {{ if $rule.Args -}}
  {{ if eq (index $rule.Args 0).Op "&" }}
  if (({{ (index $rule.Args 0).Value }} {{ (index $rule.Args 0).Op }} arg{{ (index $rule.Args 0).Index }}) == {{ (index $rule.Args 0).ValueTwo }}) 
  {{ else }}
  if (arg{{ (index $rule.Args 0).Index }} {{ (index $rule.Args 0).Op }} {{ (index $rule.Args 0).Value }}) 
  {{- end -}}
  {
  {{ end -}}
  {{- if or $rule.Excludes.Caps $rule.Includes.Caps -}}
  if (
  {{- $lastIndex := sub (len $rule.Excludes.Caps) 1 -}}
  {{- if $rule.Excludes.Caps -}}
  {{- range $index, $cap := $rule.Excludes.Caps -}}
  !(caps & 1ULL << {{ $cap }}) {{ if ne $index $lastIndex }} && {{- end -}}
  {{- end -}}
  ) {
  {{- end }}
  {{- if or $rule.Includes.Caps -}}
  {{- $lastIndex := sub (len $rule.Includes.Caps) 1 -}}
  {{- range $index, $cap := $rule.Includes.Caps -}}
  (caps & 1ULL << {{ $cap }}) {{ if ne $index $lastIndex }} || {{- end -}}
  {{- end -}}
  ) {
  {{- end -}}
  {{- end }}
  bpf_map_update_elem(&actions, &pid_tgid, &{{ $rule.Action }}, BPF_NOEXIST);
  return 0;
  {{ if or $rule.Excludes.Caps $rule.Includes.Caps -}} } {{ end }}
  {{- if $rule.Args }}
  }

  {{- end -}}
  {{- end }}
  
  {{- if syscallHasFilters $syscall }}
  return 0;
  {{ end }}
}
{{ end }}


char LICENSE[] SEC("license") = "GPL";
